{"version":3,"sources":["routes/index.js","components/common/AppHeader/index.js","components/common/AppHeader/AppHeader.js","components/common/AppFooter/index.js","components/common/AppFooter/AppFooter.js","App.js","store/counter/counterSlice.js","store/index.js","index.js"],"names":["MainPage","loadable","AboutPage","path","exact","component","from","to","AppHeader","withRouter","pathname","location","className","AppFooter","App","slice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","configureStore","reducer","counter","counterReducer","ReactDOM","render","store","document","getElementById"],"mappings":"6RAMMA,EAAWC,aAAS,kBAAM,gCAC1BC,EAAYD,aAAS,kBAAM,gCAElB,oBACb,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,KAAK,IAAIC,OAAK,EAACC,UAAWL,IACjC,kBAAC,IAAD,CAAOG,KAAK,SAASE,UAAWH,IAChC,kBAAC,IAAD,CAAUI,KAAK,IAAIC,GAAG,SCZbC,G,MCoBAC,aAlBG,SAAC,GAAgC,IAAlBC,EAAiB,EAA7BC,SAAYD,SAC/B,OACE,4BAAQE,UAAU,cAChB,wBAAIA,UAAU,eAAd,gBACA,yBAAKA,UAAU,WACb,wBAAIA,UAAU,QACZ,wBAAIA,UAAwB,MAAbF,EAAmB,SAAW,IAC3C,kBAAC,IAAD,CAAMH,GAAG,KAAT,iBAEF,wBAAIK,UAAwB,WAAbF,EAAwB,SAAW,IAChD,kBAAC,IAAD,CAAMH,GAAG,UAAT,wBCZGM,G,MCIG,WAChB,OAAO,4BAAQD,UAAU,cAAlB,kB,MCWME,MAZf,WACE,OACE,yBAAKF,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,gBACb,kBAAC,EAAD,OAEF,kBAAC,EAAD,Q,QCXOG,EAAQC,YAAY,CAC/BC,KAAM,UACNC,aAAc,CACZC,MAAO,GAETC,SAAU,CACRC,UAAW,SAAAC,GAKTA,EAAMH,OAAS,GAEjBI,UAAW,SAAAD,GACTA,EAAMH,OAAS,GAEjBK,kBAAmB,SAACF,EAAOG,GACzBH,EAAMH,OAASM,EAAOC,Y,EAK+BX,EAAMY,QAiBlDZ,G,EAjBAM,U,EAAWE,U,EAAWC,kBAiBtBT,EAAf,SCtCea,cAAe,CAC5BC,QAAS,CACPC,QAASC,K,QCGbC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.cf60b792.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Route, Redirect, Switch } from 'react-router-dom';\r\nimport loadable from '@loadable/component';\r\n// import MainPage from './pages/MainPage';\r\n// import AboutPage from './pages/AboutPage';\r\n\r\nconst MainPage = loadable(() => import('../pages/MainPage'));\r\nconst AboutPage = loadable(() => import('../pages/AboutPage'));\r\n\r\nexport default () => (\r\n  <>\r\n    <Switch>\r\n      <Route path=\"/\" exact component={MainPage} />\r\n      <Route path=\"/about\" component={AboutPage} />\r\n      <Redirect from=\"*\" to=\"/\" />\r\n    </Switch>\r\n  </>\r\n);\r\n","import AppHeader from './AppHeader';\r\n\r\nexport default AppHeader;\r\n","import React from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport './AppHeader.scss';\r\n\r\nconst AppHeader = ({ location: { pathname } }) => {\r\n  return (\r\n    <header className=\"app-header\">\r\n      <h1 className=\"page-header\">해더</h1>\r\n      <nav className=\"app-nav\">\r\n        <ul className=\"menu\">\r\n          <li className={pathname === '/' ? 'active' : ''}>\r\n            <Link to=\"/\">메인</Link>\r\n          </li>\r\n          <li className={pathname === '/about' ? 'active' : ''}>\r\n            <Link to=\"/about\">소개</Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default withRouter(AppHeader);\r\n","import AppFooter from './AppFooter';\r\n\r\nexport default AppFooter;\r\n","import React from 'react';\r\n// import classNames from 'classnames/bind';\r\n// import styles from './AppFooter.module.scss';\r\n// const cx = classNames.bind(styles);\r\nimport './AppFooter.scss';\r\n\r\nconst AppFooter = () => {\r\n  return <footer className=\"app-footer\">푸터</footer>;\r\n};\r\n\r\nexport default AppFooter;\r\n","import React from 'react';\r\nimport Router from './routes';\r\nimport AppHeader from './components/common/AppHeader';\r\nimport AppFooter from './components/common/AppFooter';\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <AppHeader></AppHeader>\r\n      <div className=\"app-contents\">\r\n        <Router></Router>\r\n      </div>\r\n      <AppFooter></AppFooter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const slice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = slice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default slice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from './counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\nimport App from './App.js';\r\nimport store from './store';\r\nimport { Provider } from 'react-redux';\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </Router>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}